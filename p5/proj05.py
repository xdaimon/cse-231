###########################################################
# Computer Project #5
#
# This program parses a table of advertising information for a number of
# products.
# With the parsed data some statistics are calculated.
# For each product in the table the statistics for that product are printed.
#
# The program operates on an 'ad' data structure
# ad = {
#     string  product name
#     string  ad name
#     int     num ads purchased
#     float   ad price
#     int     num product sales
#     float   product price
#     float   product production cost
# }
# Each row in the advertising table contains an ad
#
###########################################################

def open_file():
    '''prompt for file name, open file, return file pointer'''
    while True:
        try:
            filename = input("Input a file name: ")
            fp = open(filename)
            break
        except FileNotFoundError:
            print("Unable to open file. Please try again.")
    return fp


def revenue(num_sales, sale_price):
    '''revenue = sales * price'''
    return num_sales * sale_price


def cost_of_goods_sold(num_ads, ad_price, num_sales, production_cost):
    '''costs of goods sold = advertising total + production total'''
    advertising_total = num_ads * ad_price
    production_total = production_cost * num_sales
    return advertising_total + production_total


def calculate_ROI(num_ads, ad_price, num_sales, sale_price, production_cost):
    '''ROI = (Revenue - Cost of goods sold)/Cost of goods sold'''
    cogs = cost_of_goods_sold(num_ads, ad_price, num_sales, production_cost)
    return revenue(num_sales, sale_price)/cogs - 1


def get_data_from_row(row):
    '''
    row is a row from a table with 7 columns.
    This function returns a value for each column in row.
    The first two columns are 27 chars wide.
    The remaining columns are space delimited so we can use split to get the
    values.
    '''
    # width of first two columns
    WIDTH = 27

    # grab value
    product = row[:WIDTH].rstrip()
    # delete column
    row = row[WIDTH:]
    ad_name = row[:WIDTH].rstrip()
    row = row[WIDTH:]

    ret_list = [product, ad_name, *row.split()]

    for i,val in enumerate(ret_list[2:]):
        if val.count('.'):
            ret_list[i+2] = float(val)
        else:
            ret_list[i+2] = int(val)

    return ret_list


def get_ad_info(ad):
    """returns numeric information for ad (num ads, ad price, num sales, ..."""
    return ad[2:]


def get_ad_num_sales(ad):
    """returns the number of sales generated by the ad"""
    return ad[4]


def get_ad_name(ad):
    """returns the ad name"""
    return ad[1]


def get_product_name(ad):
    """returns the name of the product that the ad belongs to"""
    return ad[0]


def print_ad_stats(best_sales_ad, max_num_sales, best_ROI_ad, max_ROI):
    """
    Prints the name of the ad that sold best.
    Prints the number of sales for the best selling ad.
    Prints the name of the ad that had the best ROI.
    Prints the ROI.
    """
    print("  {:27s}{:>11s}".format("Best-Performing Ad", "sales"))
    print("  {:27s}{:>11d}".format(best_sales_ad, max_num_sales))
    print()
    print("  {:27s}{:>11s}".format("Best ROI", "percent"))
    print("  {:27s}{:>10.2f}%".format(best_ROI_ad, max_ROI))
    print()


def collect_ads_for_products(table):
    """
    table contains rows of advertising info. Call each row an ad.
    An ad belongs to a single product.
    Ads are sorted such that they are all grouped together in table.
    So if row r holds an ad for product i and row r+1 does not, then there is no
    row after r that holds an ad for product i.

    This function collects all ads that belong to product i into a list L_i.
    This function returns a list P containing all L_i.
    To create each L_i we move ads from table to ad_list (list L_i) until we
    find an ad that does not belong to the same product as the ads in ad_list.
    Then we append ad_list to product_list (list P), set ad_list = [] and start
    again.
    """
    table.reverse()
    ad_list = []
    product_list = []
    while len(table) != 0:
        prev_product_name = get_product_name(table[-1])
        next_product_name = prev_product_name
        while prev_product_name == next_product_name:
            ad_list.append(table.pop())
            if len(table) == 0:
                break
            next_product_name = get_product_name(table[-1])
        product_list.append(ad_list)
        ad_list = []
    return product_list


def calc_stats_for_product_ads(product):
    """
    product is a list of ad for a single product.
    This function will
        find the ad that generated the most sales.
        find the ad that had the highest ROI.
        display this information.
    """
    large_num_int = 10**6
    max_num_sales_int = -large_num_int
    max_ROI_flt = -large_num_int

    best_sales_ad_name = ''
    best_ROI_ad_name = ''

    ad = []
    for ad in product:
        ad_name = get_ad_name(ad)

        ad_ROI_flt = calculate_ROI(*get_ad_info(ad))
        if ad_ROI_flt >= max_ROI_flt:
            max_ROI_flt = ad_ROI_flt
            best_ROI_ad_name = ad_name

        ad_num_sales = get_ad_num_sales(ad)
        if ad_num_sales > max_num_sales_int:
            max_num_sales_int = ad_num_sales
            best_sales_ad_name = ad_name

    print(get_product_name(ad))
    print_ad_stats(best_sales_ad_name, max_num_sales_int, best_ROI_ad_name,
        max_ROI_flt)


def main():
    fp = open_file()
    table = []
    for row in fp:
        table.append(get_data_from_row(row))
    # table.sort()

    print()
    print("RobCo AdStats M4000")
    print("-------------------")
    print()

    product_list = collect_ads_for_products(table)

    for product in product_list:
        calc_stats_for_product_ads(product)


if __name__ == "__main__":
    main()
